const path = require('path')

console.log(
  '__dirname:', __dirname, '\n',
  '__filename:', __filename, '\n',
  'path.basename(__filename):', path.basename(__filename), '\n',
  `path.basename(__filename, '.js'):`, path.basename(__filename, '.js'), '\n',
  'path.basename(__dirname):', path.basename(__dirname), '\n',
  `path.basename(__dirname, 'c'):`, path.basename(__dirname, 'c'), '// 字符串处理\n',
  'path.delimiter:', path.delimiter, '\n',
  'path.win32.delimiter:', path.win32.delimiter, '// 指定Windows平台\n',
  'path.posix.delimiter:', path.posix.delimiter, '\n',
  'path.sep:', path.sep, '\n',
  'path.win32.sep:', path.win32.sep, '\n',
  'path.posix.sep:', path.posix.sep, '\n',
  'path.dirname(__filename):', path.dirname(__filename), '\n',
  'path.dirname(__dirname):', path.dirname(__dirname), '// 返回输入路径的所在目录\n',
  'path.extname(__filename):', path.extname(__filename), '// 返回最后.及之后的字符串\n',
  'path.parse(__filename):', path.parse(__filename), '\n',
  `path.format({root: '/', name: 'file', ext: '.js'}):`, path.format({root: '/', name: 'file', ext: '.js'}), '\n',
  `path.format({root: '/', base: 'file.js', ext: 'anything, ignored'}):`, path.format({root: '/', base: 'file.js', ext: 'anything, ignored'}), '\n',
  `path.isAbsolute('/baz/..'):`, path.isAbsolute('/baz/..'), '\n',
  `path.isAbsolute('C:/foo/..'):`, path.isAbsolute('C:/foo/..'), '\n',
  `path.isAbsolute('qux/'):`, path.isAbsolute('qux/'), '\n',
  `path.isAbsolute('.'):`, path.isAbsolute('.'), '\n',
  `path.join('/foo', 'bar', 'baz/asdf/', './abc')`, path.join('/foo', 'bar', 'baz/asdf/', './abc'), '// 将输入字符拼接为有效的路径格式\n',
  `path.join('/foo', 'bar', 'baz/asdf/', './abc', '..')`, path.join('/foo', 'bar', 'baz/asdf/', './abc', '..'), '\n',
  `path.normalize('/foo/./asdf//////quux/../..')`, path.normalize('/foo/./asdf//////quux/../..'), '// 将输入字符序列为有效的路径格式\n',
  `path.relative('/data/test/from', '/data/impl/to')`, path.relative('/data/test/from', '/data/impl/to'), '\n',
  `path.resolve('./', 'a/b')`, path.resolve('./', 'a/b'), '// 类似path.join，返回绝对路径\n',
  `path.toNamespacedPath('./abc')`, path.toNamespacedPath('./abc'), '//仅Windows有效\n',
  `path.win32.toNamespacedPath('./abc')`, path.win32.toNamespacedPath('./abc'), '\n',
  `path.posix.toNamespacedPath('./abc')`, path.posix.toNamespacedPath('./abc'), '\n',
)